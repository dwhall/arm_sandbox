Analysis of Effects of Code Generation Changes
==============================================

Cross-compiler version matters
------------------------------

I've found that the version of the arm-none-eabi-gcc toolchain matters when called by Nim.
Here is my experience:

==============  ================================================================================
Version         Result
==============  ================================================================================
5.4.1           Works
8.3.1           Works
9.2.1           Works
11.3.r1         `gcc` works, but `size` errors out because of the *.o argument
13.2.r1         fatal error: cannot execute 'cc1': CreateProcess: No such file or directory
==============  ================================================================================

Version details:
* 5.4.1 == arm-none-eabi-gcc (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-branch revision 237715]
* 8.3.1 == arm-none-eabi-gcc (GNU Tools for Arm Embedded Processors 8-2019-q3-update) 8.3.1 20190703 (release) [gcc-8-branch revision 273027]
* 9.2.1 == arm-none-eabi-gcc (xPack GNU Arm Embedded GCC, 64-bit) 9.2.1 20191025 (release) [ARM/arm-9-branch revision 277599]
* 11.3.r1 == arm-none-eabi-gcc (Arm GNU Toolchain 11.3.Rel1) 11.3.1 20220712
* 13.2.r1 == arm-none-eabi-gcc (Arm GNU Toolchain 13.2.rel1 (Build arm-13.7)) 13.2.1 20231009


Method
------

Start with a simple main() that employs the most common use patterns.
Run `svd2nim`-equivalent on it, compile to .o and disassemble to establish a baseline.
Examine the initialized data (.data), code (.text) and uninitialized data (.bss);
that is the suggested priority order as well.

Results
-------

::
   text    data     bss     dec     hex filename
   1484       0      12    1496     5d8 @mmain_orig.nim.c.o
   1016       0      12    1028     404 @mmain_1.nim.c.o
    880       0      12     892     37c @mmain_2.nim.c.o
    408       0      12     420     1a4 @mmain_3.nim.c.o
    380       0      12     392     188 @mmain_4.nim.c.o

main_orig.nim
-------------

Snippets taken from the output of `svd2nim` using an SVD file
for an STM32F446 microcontroller.

main_1.nim
----------

Differences from `main_orig.nim`:

* Eliminate Peripheral's big list of addresses.
* Declare RegisterVal as an int the size of the architecture's registers, uint.
* Declare each register value type as a distinct RegisterVal.
* Declare a ptr to that register value
* Define a const register value, casting the register's address as a ptr to the register value.
* All reg parameters in read/write/modifyIt are `static`

main_2.nim
----------

Differences from `main_1.nim`:

* In read/write/volatileLoad, replace use of `reg` parameter with const register.
* Replace modifyIt's read/write with volatileLoad/Store.

main_3.nim
----------

Differences from `main_2.nim`:

* Replaced all calls to std/bitops funcs (except bitNot) with and/or keywords

main_4.nim
----------

Differences from `main_3.nim`:

* Access registers via <peripheral>.<reg>
